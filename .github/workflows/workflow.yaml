name: Build, Test, and Publish

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
      - master
  release:
    types: [published]

jobs:
  build-and-publish:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.11-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.11-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Clean previous builds
        run: |
          if exist build rmdir /s /q build
          if exist dist rmdir /s /q dist
          if exist mouse_anywhere.egg-info rmdir /s /q mouse_anywhere.egg-info
        shell: cmd

      - name: Setup MSVC environment and compile C code
        shell: cmd
        run: |
          "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath > vcpath.txt
          set /p vcpath=<vcpath.txt
          call "%vcpath%\VC\Auxiliary\Build\vcvarsall.bat" x64
          cl /LD mouse-anywhere.c /Fe:mouse_anywhere2.dll user32.lib

      - name: Verify DLL creation
        shell: cmd
        run: |
          if not exist mouse_anywhere2.dll (
            echo "DLL was not created."
            exit 1
          )
          echo "DLL successfully created."
          dir mouse_anywhere2.dll

      - name: Build Python package
        run: |
          python setup.py sdist bdist_wheel

      - name: Verify dist contents
        run: |
          echo "Checking dist directory contents:"
          dir dist
        shell: cmd

      - name: Run tests
        run: |
          REM Install the built package
          for %%f in (dist\*.whl) do pip install %%f || exit 1
          REM Install testing dependencies
          pip install pytest
          REM Run tests
          pytest tests/
        shell: cmd

      - name: Debug event details
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Event action: ${{ github.event.action }}"

      - name: Publish to PyPI with Twine
        if: > 
          github.event_name == 'release' && github.event.action == 'published' || 
          (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
        run: |
          python -m pip install twine
          python -m twine upload dist/* --verbose
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
